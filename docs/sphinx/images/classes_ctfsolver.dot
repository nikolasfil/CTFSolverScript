digraph "classes_ctfsolver" {
rankdir=BT
charset="utf-8"
"ctfsolver.src.ctfsolver.CTFSolver" [color="black", fontcolor="black", label=<{CTFSolver|debug<br ALIGN="LEFT"/>|initializing_all_ancestors()<br ALIGN="LEFT"/><I>main</I>()<br ALIGN="LEFT"/>try_main()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ctfsolver.managers.manager_folder.ManagerFolder.get_functions_from_file.FunctionDefFinder" [color="black", fontcolor="black", label=<{FunctionDefFinder|function_def : NoneType<br ALIGN="LEFT"/>|visit_FunctionDef(node)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ctfsolver.managers.manager_folder.ManagerFolder.find_function_from_file.FunctionDefFinder" [color="black", fontcolor="black", label=<{FunctionDefFinder|function_def : NoneType<br ALIGN="LEFT"/>|visit_FunctionDef(node)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ctfsolver.config.global_config.GlobalConfig" [color="black", fontcolor="black", label=<{GlobalConfig|content : dict<br ALIGN="LEFT"/>global_config_file_path : Path<br ALIGN="LEFT"/>verbose<br ALIGN="LEFT"/>|creating()<br ALIGN="LEFT"/>get_content()<br ALIGN="LEFT"/>initial_content()<br ALIGN="LEFT"/>initializing()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ctfsolver.inline.inline_tool.InlineTool" [color="black", fontcolor="black", label=<{InlineTool|error_handler<br ALIGN="LEFT"/>home_path : Path<br ALIGN="LEFT"/>manager<br ALIGN="LEFT"/>|function_create_ctf()<br ALIGN="LEFT"/>function_ctf()<br ALIGN="LEFT"/>function_folders()<br ALIGN="LEFT"/>function_init()<br ALIGN="LEFT"/><I>function_link</I>()<br ALIGN="LEFT"/>main()<br ALIGN="LEFT"/>print_help_message()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ctfsolver.managers.manager_connections.ManagerConnections" [color="black", fontcolor="black", label=<{ManagerConnections|conn : NoneType, process, remote<br ALIGN="LEFT"/>conn_type<br ALIGN="LEFT"/>debug<br ALIGN="LEFT"/>menu_num : NoneType<br ALIGN="LEFT"/>menu_text : NoneType<br ALIGN="LEFT"/>port<br ALIGN="LEFT"/>pwn<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>|connect(): None<br ALIGN="LEFT"/>initiate_connection(): None<br ALIGN="LEFT"/>recv_lines(number, display, save)<br ALIGN="LEFT"/>recv_menu(number, display, save)<br ALIGN="LEFT"/>recv_send(text, lines, text_until, display, save)<br ALIGN="LEFT"/>recv_until(text): bytes<br ALIGN="LEFT"/>send(text, encode): None<br ALIGN="LEFT"/>send_menu(choice, menu_num, menu_text, display, save)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ctfsolver.managers.manager_crypto.ManagerCrypto" [color="black", fontcolor="black", label=<{ManagerCrypto|<br ALIGN="LEFT"/>|decode_base64(text)<br ALIGN="LEFT"/><I>initializing_all_ancestors</I>()<br ALIGN="LEFT"/>re_match_base64_string(text: str, strict): list[str]<br ALIGN="LEFT"/>re_match_flag(text: str, origin: str): list[str]<br ALIGN="LEFT"/>re_match_partial_flag(text: str, origin: str): list[str]<br ALIGN="LEFT"/>xor(text: str, key: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ctfsolver.forensics.manager_dash.ManagerDash" [color="black", fontcolor="black", label=<{ManagerDash|app : Dash<br ALIGN="LEFT"/>elements : list<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>|elements_checker(elements: list[dict]): bool<br ALIGN="LEFT"/>example_element_creator()<br ALIGN="LEFT"/>pcap_to_element_converter(packets: list[scapy.packet.Packet], save: bool): list[dict]<br ALIGN="LEFT"/>pcap_to_element_converter_timestamp(packets: list[scapy.packet.Packet], save: bool): list[dict]<br ALIGN="LEFT"/>run_dash()<br ALIGN="LEFT"/>setup_dash()<br ALIGN="LEFT"/>setup_dash_functions()<br ALIGN="LEFT"/>setup_dash_layout()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ctfsolver.error.manager_error.ManagerError" [color="black", fontcolor="black", label=<{ManagerError|verbose<br ALIGN="LEFT"/>|handle(exception: Exception, exit_code: int)<br ALIGN="LEFT"/>try_function(function: callable)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ctfsolver.managers.manager_file.ManagerFile" [color="black", fontcolor="black", label=<{ManagerFile|<br ALIGN="LEFT"/>|initializing_file_ancestors()<br ALIGN="LEFT"/>search_for_base64(file)<br ALIGN="LEFT"/>search_for_base64_file(file)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ctfsolver.managers.manager_files_evtx.ManagerFileEvtx" [color="black", fontcolor="black", label=<{ManagerFileEvtx|<br ALIGN="LEFT"/>|<I>initializing_all_ancestors</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ctfsolver.managers.manager_files_pcap.ManagerFilePcap" [color="black", fontcolor="black", label=<{ManagerFilePcap|packets<br ALIGN="LEFT"/>|get_packet_ttl(packets)<br ALIGN="LEFT"/>get_packets_icmp(packets)<br ALIGN="LEFT"/><I>initializing_all_ancestors</I>()<br ALIGN="LEFT"/>pcap_open(file, save): list[scapy.packet.Packet] \| None<br ALIGN="LEFT"/>searching_text_in_packets(text, packets, display)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ctfsolver.managers.manager_files_re.ManagerFileRegex" [color="black", fontcolor="black", label=<{ManagerFileRegex|<br ALIGN="LEFT"/>|extract_strings(file_path, min_length)<br ALIGN="LEFT"/><I>initializing_all_ancestors</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ctfsolver.managers.manager_folder.ManagerFolder" [color="black", fontcolor="black", label=<{ManagerFolder|Path : Path<br ALIGN="LEFT"/>challenge_file : Path<br ALIGN="LEFT"/>debug<br ALIGN="LEFT"/>file<br ALIGN="LEFT"/>file_called_frame : list<br ALIGN="LEFT"/>file_called_path : Path<br ALIGN="LEFT"/>folder_data : NoneType, Path<br ALIGN="LEFT"/>folder_files : NoneType, Path<br ALIGN="LEFT"/>folder_payloads : NoneType, Path<br ALIGN="LEFT"/>folders : defaultdict<br ALIGN="LEFT"/>folders_name_list<br ALIGN="LEFT"/>parent : NoneType, Path<br ALIGN="LEFT"/>solution_file : NoneType, Path<br ALIGN="LEFT"/>verbose<br ALIGN="LEFT"/>|challenge_folder_structure()<br ALIGN="LEFT"/>check_empty_folder(folder)<br ALIGN="LEFT"/>clean_folders(folders: list)<br ALIGN="LEFT"/>create_parent_folder()<br ALIGN="LEFT"/>exec_on_files(folder, func)<br ALIGN="LEFT"/>find_function_from_file(file_path, function_name)<br ALIGN="LEFT"/>folders_file()<br ALIGN="LEFT"/>folfil(folder, file)<br ALIGN="LEFT"/>get_challenge_file()<br ALIGN="LEFT"/>get_function_reference(function, file)<br ALIGN="LEFT"/>get_functions_from_file(file_path)<br ALIGN="LEFT"/>get_parent()<br ALIGN="LEFT"/>get_self_functions()<br ALIGN="LEFT"/>get_solution_file()<br ALIGN="LEFT"/>handling_global_config()<br ALIGN="LEFT"/>init_for_challenge()<br ALIGN="LEFT"/><I>initializing_all_ancestors</I>()<br ALIGN="LEFT"/>prepare_space(files, folder, test_text)<br ALIGN="LEFT"/>recursive_folder_search(function)<br ALIGN="LEFT"/>search_files(directory, exclude_dirs, search_string, save, display)<br ALIGN="LEFT"/>search_for_pattern_in_file(file, func, display, save)<br ALIGN="LEFT"/>setup_named_folders()<br ALIGN="LEFT"/>single_folder_search()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ctfsolver.inline.parser.Parser" [color="black", fontcolor="black", label=<{Parser|args : Namespace<br ALIGN="LEFT"/>command_list : list<br ALIGN="LEFT"/>functions<br ALIGN="LEFT"/>parser : ArgumentParser<br ALIGN="LEFT"/>|add_arguments()<br ALIGN="LEFT"/>automatic_functions_gathering(self_save)<br ALIGN="LEFT"/><I>main</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ctfsolver.src.position_cipher_functions.PositionCipher" [color="black", fontcolor="black", label=<{PositionCipher|key : list<br ALIGN="LEFT"/>replace_combos : list<br ALIGN="LEFT"/>|another_attempt()<br ALIGN="LEFT"/>brute_transpose_find_flag(lyrics: str, partial_flag: str, keys: list, verbose: bool, wrap: bool)<br ALIGN="LEFT"/>bruteforce_all_lyrics(all_lyrics: list, partial_flag: str, keys: list, verbose: bool, wrap: bool)<br ALIGN="LEFT"/>check_for_rot(text, partial)<br ALIGN="LEFT"/>creating_control_combos(start, end, number)<br ALIGN="LEFT"/>dictionary_analysis(lyrics)<br ALIGN="LEFT"/>init_some_values()<br ALIGN="LEFT"/>load_lyrics()<br ALIGN="LEFT"/>lyric_transformation(lyrics)<br ALIGN="LEFT"/>lyric_transpose(lyrics, offset, wrap)<br ALIGN="LEFT"/>lyrics_all()<br ALIGN="LEFT"/>lyrics_transformation(lyrics, replace_combos, control_combos)<br ALIGN="LEFT"/>main()<br ALIGN="LEFT"/>position_cipher(text: str, keys: list)<br ALIGN="LEFT"/>print_dictionary(d)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ctfsolver.template.solution_template.Solution" [color="black", fontcolor="black", label=<{Solution|<br ALIGN="LEFT"/>|<I>main</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ctfsolver.template.__main__.Templater" [color="black", fontcolor="black", label=<{Templater|file_attempt : Path<br ALIGN="LEFT"/>files_attempts<br ALIGN="LEFT"/>folder_attempts : Path<br ALIGN="LEFT"/>next_attempt : int<br ALIGN="LEFT"/>verbose : bool<br ALIGN="LEFT"/>|create_attempts()<br ALIGN="LEFT"/>find_folder_in_frame(folder_name: str): Path \| None<br ALIGN="LEFT"/>main()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ctfsolver.inline.inline_tool.InlineTool" -> "ctfsolver.inline.parser.Parser" [arrowhead="empty", arrowtail="none"];
"ctfsolver.managers.manager_file.ManagerFile" -> "ctfsolver.managers.manager_files_pcap.ManagerFilePcap" [arrowhead="empty", arrowtail="none"];
"ctfsolver.managers.manager_file.ManagerFile" -> "ctfsolver.managers.manager_files_re.ManagerFileRegex" [arrowhead="empty", arrowtail="none"];
"ctfsolver.managers.manager_file.ManagerFile" -> "ctfsolver.managers.manager_folder.ManagerFolder" [arrowhead="empty", arrowtail="none"];
"ctfsolver.src.ctfsolver.CTFSolver" -> "ctfsolver.error.manager_error.ManagerError" [arrowhead="empty", arrowtail="none"];
"ctfsolver.src.ctfsolver.CTFSolver" -> "ctfsolver.managers.manager_connections.ManagerConnections" [arrowhead="empty", arrowtail="none"];
"ctfsolver.src.ctfsolver.CTFSolver" -> "ctfsolver.managers.manager_crypto.ManagerCrypto" [arrowhead="empty", arrowtail="none"];
"ctfsolver.src.ctfsolver.CTFSolver" -> "ctfsolver.managers.manager_file.ManagerFile" [arrowhead="empty", arrowtail="none"];
"ctfsolver.template.__main__.Templater" -> "ctfsolver.managers.manager_file.ManagerFile" [arrowhead="empty", arrowtail="none"];
"ctfsolver.template.solution_template.Solution" -> "ctfsolver.src.ctfsolver.CTFSolver" [arrowhead="empty", arrowtail="none"];
"ctfsolver.error.manager_error.ManagerError" -> "ctfsolver.inline.inline_tool.InlineTool" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="error_handler", style="solid"];
"ctfsolver.managers.manager_file.ManagerFile" -> "ctfsolver.inline.inline_tool.InlineTool" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="manager", style="solid"];
}
